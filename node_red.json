[
    {
        "id": "f2565d2c7d491d45",
        "type": "tab",
        "label": "Flow 6",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "75cd7f876274d3b0",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "dish/sensor/dish_level_detector",
        "qos": "2",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 670,
        "y": 60,
        "wires": []
    },
    {
        "id": "faaef68c4cbe9dd2",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "dish/sensor/waterflow_monitor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 670,
        "y": 160,
        "wires": []
    },
    {
        "id": "2f5d52829bc48dd1",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "dish/sensor/dish_weight_reader",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 670,
        "y": 260,
        "wires": []
    },
    {
        "id": "10b762310ffdc5c0",
        "type": "inject",
        "z": "f2565d2c7d491d45",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 540,
        "wires": [
            [
                "7c6c6705d91116b5",
                "e6d9d8bc5e04495a",
                "7276fd55a56f36d5",
                "de5d45cf410dca66",
                "1eea5a85b91189c7",
                "30548b323da268d5",
                "b130476657ad218e",
                "75573bc7a9a95548",
                "2bca6330b9fe0fd3"
            ]
        ]
    },
    {
        "id": "7c33c9ed9c31b29e",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "stove/sensor/temperature_reader",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "a8e46f04087f036d",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "stove/sensor/gas_leak_detector",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 670,
        "y": 520,
        "wires": []
    },
    {
        "id": "d2ecc13d1966a2b4",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "stove/sensor/smoke_detector",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 660,
        "y": 600,
        "wires": []
    },
    {
        "id": "2ef08b0ee4749df3",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "customer/sensor/camera",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 630,
        "y": 760,
        "wires": []
    },
    {
        "id": "4831401727a3b5a1",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "customer/sensor/motion_detector",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 660,
        "y": 860,
        "wires": []
    },
    {
        "id": "4bfb5f894fe463d6",
        "type": "mqtt out",
        "z": "f2565d2c7d491d45",
        "name": "",
        "topic": "customer/sensor/sound_sensor",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8dd1858f9f7e633d",
        "x": 650,
        "y": 960,
        "wires": []
    },
    {
        "id": "b41743351bf85a70",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 120,
        "wires": []
    },
    {
        "id": "c017d1bfb0845ef0",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "ef016f2a93818e28",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 320,
        "wires": []
    },
    {
        "id": "f1892b753531aa85",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 480,
        "wires": []
    },
    {
        "id": "d0a0cc975d2c49b2",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 560,
        "wires": []
    },
    {
        "id": "2c1997acd33f04b5",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 640,
        "wires": []
    },
    {
        "id": "86028222067364eb",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 800,
        "wires": []
    },
    {
        "id": "6bb512f0d08fecf5",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 900,
        "wires": []
    },
    {
        "id": "e888f02faea0f1e8",
        "type": "debug",
        "z": "f2565d2c7d491d45",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 1020,
        "wires": []
    },
    {
        "id": "7c6c6705d91116b5",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Dish Level Detector Random",
        "func": "const dishLevelRandomValue = Math.floor(Math.random() * (10 - 1 + 1) + 1);\nconst dishLevelValue = Math.floor(dishLevelRandomValue / 1) * 1;\nconst dishLevel = parseFloat(dishLevelValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForDishLevel(dishLevel);\nmsg.payload = dishLevel;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 60,
        "wires": [
            [
                "75cd7f876274d3b0",
                "b41743351bf85a70"
            ]
        ]
    },
    {
        "id": "e6d9d8bc5e04495a",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Waterflow Monitor",
        "func": "const waterflowRandomValue = Math.floor(Math.random() * (10 - 1 + 1) + 1);\nconst waterflowValue = Math.floor(waterflowRandomValue / 1) * 1;\nconst waterflow = parseFloat(waterflowValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForWaterflow(waterflow);\nmsg.payload = waterflow;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "faaef68c4cbe9dd2",
                "c017d1bfb0845ef0"
            ]
        ]
    },
    {
        "id": "7276fd55a56f36d5",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Dish Weight Reader",
        "func": "const dishWeightRandomValue = Math.floor(Math.random() * (10 - 1 + 1) + 1);\nconst dishWeightValue = Math.floor(dishWeightRandomValue / 1) * 1;\nconst dishWeight = parseFloat(dishWeightValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForDishWeight(dishWeight);\nmsg.payload = dishWeight;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 300,
        "wires": [
            [
                "2f5d52829bc48dd1",
                "ef016f2a93818e28"
            ]
        ]
    },
    {
        "id": "de5d45cf410dca66",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Temperature Reader",
        "func": "const temperatureRandomValue = Math.floor(Math.random() * (120 - 20 + 1) + 20);\nconst temperatureValue = Math.floor(temperatureRandomValue / 1) * 1;\nconst temperature = parseFloat(temperatureValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForTemperature(temperature);\nmsg.payload = temperature;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 440,
        "wires": [
            [
                "7c33c9ed9c31b29e",
                "f1892b753531aa85"
            ]
        ]
    },
    {
        "id": "1eea5a85b91189c7",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Gas Leak Detector",
        "func": "const gasLeakRandomValue = Math.floor(Math.random() * (10 - 1 + 1) + 1);\nconst gasLeakValue = Math.floor(gasLeakRandomValue / 1) * 1;\nconst gasLeak = parseFloat(gasLeakValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForGasLeak(gasLeak);\nmsg.payload = gasLeak;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 540,
        "wires": [
            [
                "a8e46f04087f036d",
                "d0a0cc975d2c49b2"
            ]
        ]
    },
    {
        "id": "30548b323da268d5",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Smoke Detector",
        "func": "const smokeRandomValue = Math.floor(Math.random() * (10 - 0 + 1) + 0);\nconst smokeValue = Math.floor(smokeRandomValue / 1) * 1;\nconst smoke = parseFloat(smokeValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForSmoke(smoke);\nmsg.payload = smoke;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 640,
        "wires": [
            [
                "d2ecc13d1966a2b4",
                "2c1997acd33f04b5"
            ]
        ]
    },
    {
        "id": "b130476657ad218e",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Camera",
        "func": "const cameraRandomValue = Math.floor(Math.random() * (3 - 0 + 1) + 0);\nconst cameraValue = Math.floor(cameraRandomValue / 1) * 1;\nconst camera = parseFloat(cameraValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForCamera(camera);\nmsg.payload = camera;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 780,
        "wires": [
            [
                "2ef08b0ee4749df3",
                "86028222067364eb"
            ]
        ]
    },
    {
        "id": "75573bc7a9a95548",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Motion Detector",
        "func": "const motionRandomValue = Math.floor(Math.random() * (8 - 0 + 1) + 0);\nconst motionValue = Math.floor(motionRandomValue / 1) * 1;\nconst motion = parseFloat(motionValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForMotion(motion);\nmsg.payload = motion;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 880,
        "wires": [
            [
                "4831401727a3b5a1",
                "6bb512f0d08fecf5"
            ]
        ]
    },
    {
        "id": "2bca6330b9fe0fd3",
        "type": "function",
        "z": "f2565d2c7d491d45",
        "name": "Sound Sensor",
        "func": "const soundRandomValue = Math.floor(Math.random() * (100 - 1 + 1) + 1);\nconst soundValue = Math.floor(soundRandomValue / 1) * 1;\nconst sound = parseFloat(soundValue.toFixed(1));\n\n// Call a function or send the value to Node-RED\n// insertFunctionForSound(sound);\nmsg.payload = sound;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1000,
        "wires": [
            [
                "4bfb5f894fe463d6",
                "e888f02faea0f1e8"
            ]
        ]
    },
    {
        "id": "8dd1858f9f7e633d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]